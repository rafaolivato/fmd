datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("farmaceutico") // Ex: 'admin', 'farmaceutico'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medicamento {
  id                String            @id @default(uuid())
  principioAtivo    String            @unique
  concentracao      String
  formaFarmaceutica String
  psicotropico      Boolean           @default(false)
  quantidadeEstoque Int               @default(0) // Estoque total, independente do lote
  itensMovimentados ItemMovimento[] // Indica que um Medicamento pode ter muitos ItemMovimento
  itensDispensados  ItemDispensacao[]
  estoqueLocal      EstoqueLocal[] // Referência inversa de EstoqueLocal
  estoqueLotes EstoqueLote[]  // Campo inverso da relação
  itensRequisicao   ItemRequisicao[] // Referência inversa de ItemRequisicao
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Movimento {
  id String @id @default(uuid())

  // DADOS DA TRANSAÇÃO GERAL
  tipoMovimentacao   String // Ex: Entrada Ordinária, Ajuste de Estoque
  fonteFinanciamento String // Ex: Municipal, Estadual + Federal
  fornecedor         String // Nome da Distribuidora/Entidade
  documentoTipo      String // Ex: Nota Fiscal, Nota de Simples Remessa
  numeroDocumento    String   @unique // Chave única para o documento
  dataDocumento      DateTime
  dataRecebimento    DateTime
  valorTotal         Float
  observacao         String?

  estabelecimentoId String
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])

  // Relação com os Itens desta movimentação
  itensMovimentados ItemMovimento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemMovimento {
  id String @id @default(uuid())

  // DADOS ESPECÍFICOS DO ITEM/LOTE
  valorUnitario     Float
  fabricante        String // Fabricante (pode ser diferente do Fornecedor/Distribuidor)
  numeroLote        String
  dataValidade      DateTime
  quantidade        Int
  localizacaoFisica String // Ex: Prateleira A, Armário 1

  // RELACIONAMENTO COM MEDICAMENTO (O ITEM que está sendo movimentado)
  medicamentoId String
  medicamento   Medicamento @relation(fields: [medicamentoId], references: [id])

  // RELACIONAMENTO COM O MOVIMENTO (O DOCUMENTO ao qual pertence)
  movimentoId String
  movimento   Movimento @relation(fields: [movimentoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Garante que não se insira o mesmo lote no mesmo documento
  @@unique([numeroLote, movimentoId])
}

model Dispensacao {
  id String @id @default(uuid())

  // DADOS DA SAÍDA GERAL (Receituário)
  pacienteNome        String
  pacienteCpf         String? // Opcional, dependendo da regra
  profissionalSaude   String? // Médico, dentista, etc.
  documentoReferencia String // Ex: Número do Receituário, Prontuário
  dataDispensacao     DateTime @default(now())
  observacao          String?

  // Relação com os itens que foram dispensados
  itensDispensados ItemDispensacao[]

  estabelecimentoOrigemId String
  estabelecimentoOrigem   Estabelecimento @relation("DispensacaoOrigem", fields: [estabelecimentoOrigemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemDispensacao {
  id String @id @default(uuid())

  // DADOS ESPECÍFICOS DO ITEM DISPENSADO
  quantidadeSaida Int // Quantidade que está saindo (sempre positiva)

  // O lote que foi consumido
  loteNumero String // Guardamos o LOTE que foi dispensado (para registro)

  // RELACIONAMENTO COM MEDICAMENTO
  medicamentoId String
  medicamento   Medicamento @relation(fields: [medicamentoId], references: [id])

  // RELACIONAMENTO COM A DISPENSAÇÃO
  dispensacaoId String
  dispensacao   Dispensacao @relation(fields: [dispensacaoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação inversa no Medicamento:
  // @relation(name: "DispensacaoDeItens")
}

model Estabelecimento {
  id   String  @id @default(uuid())
  nome String  @unique
  cnpj String? // Ex: 00.000.000/0001-00
  tipo String // Ex: 'ALMOXARIFADO', 'FARMACIA_UNIDADE'

  // RELACIONAMENTOS INVERSOS:
  solicitacoes Requisicao[] @relation("Solicitante")
  atendimentos Requisicao[] @relation("Atendente")
  estoqueLotes EstoqueLote[]  // Campo inverso da relação

  // Nova tabela para Estoque por Local (ver item B)
  estoqueLocal EstoqueLocal[]

  saidasDispensacao Dispensacao[] @relation("DispensacaoOrigem")

  movimentos Movimento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EstoqueLocal {
  id         String @id @default(uuid())
  quantidade Int

  // Quem é o medicamento
  medicamentoId String
  medicamento   Medicamento @relation(fields: [medicamentoId], references: [id])

  // Onde ele está
  estabelecimentoId String
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Chave Única para garantir apenas um saldo por medicamento/estabelecimento
  @@unique([medicamentoId, estabelecimentoId])
}

model Requisicao {
  id String @id @default(uuid())

  // Solicitante (Farmácia de destino)
  solicitanteId String
  solicitante   Estabelecimento @relation("Solicitante", fields: [solicitanteId], references: [id])

  // Atendente (Almoxarifado/Estabelecimento de origem)
  atendenteId String
  atendente   Estabelecimento @relation("Atendente", fields: [atendenteId], references: [id])

  status          String // Ex: 'PENDENTE', 'EM_SEPARACAO', 'ATENDIDA', 'CANCELADA'
  dataSolicitacao DateTime @default(now())

  itens ItemRequisicao[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemRequisicao {
  id                   String @id @default(uuid())
  quantidadeSolicitada Int
  quantidadeAtendida   Int    @default(0) // Quanto do solicitado foi enviado

  medicamentoId String
  medicamento   Medicamento @relation(fields: [medicamentoId], references: [id])

  requisicaoId String
  requisicao   Requisicao @relation(fields: [requisicaoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model EstoqueLote {
  id String @id @default(uuid())

  // RELAÇÕES
  medicamentoId String
  medicamento Medicamento @relation(fields: [medicamentoId], references: [id])

  estabelecimentoId String
  estabelecimento Estabelecimento @relation(fields: [estabelecimentoId], references: [id])

  // DADOS DO LOTE (para busca FIFO)
  quantidade Int @default(0) // SALDO ATUAL DO LOTE (o que será baixado)
  numeroLote String
  dataValidade DateTime
  fabricante String

  // CAMPOS DE RASTREABILIDADE
  itemMovimentoEntradaId String? // Opcional: Para saber qual ItemMovimento deu origem a este saldo

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Garante que só haja um registro de um lote específico em um estabelecimento
  @@unique([medicamentoId, estabelecimentoId, numeroLote])
}


